#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const MENU_START = `<div id="menubar" class="topnav d-flex align-items-center justify-content-between">`;
const MENU_END = `<div id="online-users" class="d-flex justify-content-between"></div>`;
const menuJSON = fs.readFileSync(path.resolve('src/menu.json'), 'utf-8');

const clickHandlers = [];

(function() {
  const { template, handlers } = createMenuItems(JSON.parse(menuJSON));

  try {
    console.log('Loading index.html...');
    let htmlToEdit = fs.readFileSync(path.resolve("index.html"), { encoding: 'utf-8' });
    
    let lines = htmlToEdit.split('\n');
    let start = lines.findIndex(s => s.trim() === MENU_START);
    let end = lines.findIndex(s => s.trim() === MENU_END);
    
    let updatedTemplate = lines.slice(0, start + 1).concat(template, lines.slice(end)).join('\n');
    
    fs.writeFileSync(path.resolve('index.html'), updatedTemplate);
    console.log('Successfully updated index.html with new menu.');
  } catch (error) {
    console.log('Failed to create menu files', error);
    return;
  }
  
  try {
    fs.writeFileSync(path.resolve('src/js/menuEventHandlers.js'), handlers);
    console.log('Successfully created menu event handlers file.');
  } catch (error) {
    console.log('Failed to create menu event handlerse file', error);
    return;
  }
})();

function createMenuItems(menuJSON) {
  const headers = `
/* Click listeners for navbar menu items generated by src/generate-menu-DOM.js */
import { getMenu } from './menu.js';
import { ClassWatcher } from './collaboration/ClassWatcher.js';

const menu = getMenu();

`;

const classWatcher = `

document.querySelectorAll('li.dropdown').forEach(
  (item) =>
    new ClassWatcher(
      item,
      'show',
      () => {
        document.documentElement.style.setProperty('--collab-layer-zIndex', 1);
      },
      () => {
        document.documentElement.style.setProperty(
          '--collab-layer-zIndex',
          '1000'
        );
      }
    )
);
`;

  const navBarTemplate = `
    <nav id="actions-nav" class="navbar navbar-expand-lg navbar-dark p-0">
      
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
          ${menuItems(menuJSON)}
        </ul>
      </div>

    </nav>
  `
  return { template: navBarTemplate, handlers: headers + clickHandlers.join('\n') + classWatcher };
}

function menuItems(menuJSON) {
  let listItems = [];
  for (const entry of menuJSON.ENTRY) {
    const textValue = entry.TEXT.DEFAULT;
    const submenu = entry.SUBMENU.ENTRY;

    const submenuItem = createSubmenu(submenu);
    let li = `<li id="${(textValue + '__menu-item').toLowerCase()}" class="nav-item dropdown mr-2">
      <a class="nav-link" href="#" role="button" data-toggle="dropdown" aria-expanded="false">${textValue}</a>
      ${submenuItem ? submenuItem : ''}
    </li>`

    listItems.push(li);
  }
  return listItems.join('');
}

function createSubmenu(submenuJSON, nested = false) {
  let submenu = `<ul class="dropdown-menu p-0 ${nested && 'dropdown-submenu'}">
    ${submenuContent(submenuJSON)} 
  </ul>`;
  return submenu;
}

function submenuContent (submenuJSON) {
  let children = [];
  if (isIterable(submenuJSON)) {
    for (const entry of submenuJSON) {
      children.push(createSubmenuItem(entry));
    }
  } else {
    children.push(createSubmenuItem(submenuJSON));
  }
  return children.join('\n');
}

function nestedSubmenu(entry) {
  if (entry?.SUBMENU?.ENTRY) {
    return createSubmenu(entry.SUBMENU.ENTRY, true);
  }
  
  return "";
}

function createSubmenuItem(entry) {
  const defaultText = entry?.TEXT?.DEFAULT;
  const action = entry?.TEXT?.ACTION;
  const rightText = entry?.RIGHT_TEXT;

  let withRightText = () => {
    return rightText?.DEFAULT?.length > 0 ? `<small class="ml-3 text-nowrap"><strong>${rightText.DEFAULT}</strong></small>` : ''
  }

  let liId = (defaultText?.split(/\W/).join('-') + '__submenu-item').toLowerCase();

  let li = `<li id="${liId}" class="dropdown-item d-flex justify-content-between text-dark">
    <a class="text-decoration-none text-dark">${defaultText} ${entry?.SUBMENU ? 'Â»' : ''}</a>
    ${withRightText()}
    ${nestedSubmenu(entry)}
  </li>`;

  if (action) {
    clickHandlers.push(
      `document.querySelector('#${liId}').addEventListener('click', () => ${action.replaceAll('MENU', 'menu')});`
    );
  }

  return li;
}

function isIterable(dataStructure) {
  if (typeof dataStructure === 'null' || typeof dataStructure === 'undefined') {
    return false;
  }

  return typeof dataStructure[Symbol.iterator] === 'function';
}